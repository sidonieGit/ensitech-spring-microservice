# ==========================================================
# FICHIER: gateway-service/src/main/resources/application.yml
# ==========================================================

# Le nom de l'application est utilisé pour s'identifier auprès d'Eureka et du Config Server.
spring:
  application:
    name: gateway-service

  # Configuration pour se connecter au Config Server (méthode moderne)
  config:
    import: "optional:configserver:http://localhost:9999"

  # Profil actif. Permet de charger gateway-service-dev.yml si il existe.
  profiles:
    active: dev

--- # Séparateur pour les configurations multi-documents (optionnel mais propre)

# Cette configuration sera chargée depuis le Config Server si elle y est définie.
# On la laisse ici en fallback.
server:
  port: 8888 # Le port de la passerelle, point d'entrée unique

spring:
  cloud:
    gateway:
      # Activer l'intégration avec Eureka pour le routage dynamique
      discovery:
        locator:
          enabled: true # Indispensable pour que lb://USER-SERVICE fonctionne
          lower-case-service-id: true # Convertit les noms de service (ex: USER-SERVICE) en minuscules pour les routes

      # Définition des règles de routage
      routes:
        # Route pour toutes les requêtes vers le user-service
        - id: user-service-route # Un nom unique pour la route
          uri: lb://user-service  # "lb://" = load balanced: trouve USER-SERVICE dans Eureka
          predicates:
            # Si le chemin de la requête correspond à un de ces motifs...
            - Path=/api/teachers/**, /api/students/**, /api/studymanagers/**, /api/directors/**, /api/administrators/**

        # Route pour toutes les requêtes vers le course-service
        - id: course-service-route
          uri: lb://course-service
          predicates:
            - Path=/api/courses/**

# Configuration du client Eureka pour que le Gateway s'enregistre
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka
  instance:
    prefer-ip-address: true